generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String
  email             String          @unique
  password          String
  role              String          @default("TRAINEE")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accountsProfile   Accounts?
  feedbacks         Feedback[]
  operationsProfile Operations?
  trainerProfile    Trainer?
  trainingBatches   TrainingBatch[] @relation("TraineeToTrainingBatch")
}

model Trainer {
  id                  String               @id @default(cuid())
  userId              String               @unique
  specialization      String
  availability        Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingAssignments TrainingAssignment[]
}

model Operations {
  id              String          @id @default(cuid())
  userId          String          @unique
  department      String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchaseOrders  PurchaseOrder[]
  trainingBatches TrainingBatch[]
}

model Accounts {
  id         String    @id @default(cuid())
  userId     String    @unique
  department String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices   Invoice[]
}

model TrainingBatch {
  id           String               @id @default(cuid())
  batchName    String
  startDate    DateTime
  endDate      DateTime
  trainingType String
  createdById  String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  endTime      DateTime?
  startTime    DateTime?
  assignments  TrainingAssignment[]
  createdBy    Operations           @relation(fields: [createdById], references: [id])
  materials    TrainingMaterial[]
  trainees     User[]               @relation("TraineeToTrainingBatch")
}

model TrainingAssignment {
  id            String        @id @default(cuid())
  trainerId     String
  batchId       String
  assignedDate  DateTime      @default(now())
  status        String        @default("PENDING")
  meetingLink   String?
  venue         String?
  accommodation String?
  travel        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  batch         TrainingBatch @relation(fields: [batchId], references: [id])
  trainer       Trainer       @relation(fields: [trainerId], references: [id])
}

model TrainingMaterial {
  id          String        @id @default(cuid())
  title       String
  description String
  fileUrl     String
  batchId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  batch       TrainingBatch @relation(fields: [batchId], references: [id])
}

model PurchaseOrder {
  id           String     @id @default(cuid())
  poNumber     String     @unique
  clientName   String
  amount       Float
  fileUrl      String?
  status       String     @default("PENDING")
  uploadedById String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  invoices     Invoice[]
  uploadedBy   Operations @relation(fields: [uploadedById], references: [id])
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  amount          Float
  fileUrl         String?
  status          String        @default("PENDING")
  purchaseOrderId String
  generatedById   String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  generatedBy     Accounts      @relation(fields: [generatedById], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
